/*
 * This class has been automatically generated by Software AG Designer
 *
 */

package %value literalIfcName%;

import java.io.*;

import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.window.Window;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CLabel;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;

import com.softwareag.is.ui.editor.nsrecord.InputDialogLaunch;
import com.softwareag.is.ui.editor.utils.NSRecordUtility;

import com.wm.app.b2b.client.Context;
import com.wm.app.b2b.client.ServiceException;
import com.wm.app.b2b.server.Service;
import com.wm.app.b2b.util.GenUtil;
import com.wm.data.*;
import com.wm.lang.ns.NSName;
import com.wm.lang.ns.NSRecord;
import com.wm.lang.ns.NSService;
import com.wm.lang.ns.NSSignature;
import com.wm.net.NetException;
import com.wm.util.Values;

/**
 * This class is an Eclipse-based harness for testing a Java
 * service within the local workspace.
 * To use this test harness, simply select Run from the main
 * Eclipse menu followed by Debug As-->Java Application.  Or
 * just right-mouse click on the test harness in the Package
 * Explorer or within this editor and select Debug As-->Java
 * Application.
 *
 * This class will display a dialog for entering a user name
 * and password for accessing IS.
 * 
 * If the client wants to connect to the Integration Server
 * using the Secure Socket Layer (SSL), you need to
 *
 * (1) Uncomment the line context.setSecure(true).
 * (2) edit authentication certificates information and uncomment
 *     the line context.setSSLCertificates(cert, privKey, cacert).
 *
 * The harness will attempt to connect to the Integration Server 
 * you used when generating the client. If you require a different
 * Integration Server, please modify as indicated in the source.
 *
 * If the Java service being tested contains an input signature, a 
 * dialog will appear prompting for the inputs.
 * 
 * Any output from the Java service will be displayed in a 
 * final dialog.
 * 
 */
public class %value svcName%_TestHarness
{
    private static boolean isCancel;
    
    public static void main(String[] args)
    {
        // Connect to server - edit for alternate server
        String  server = "%value serverHost%:%value serverPort%";  //$NON-NLS-1$
        Context context = new Context();
        
        final Display display = new Display();
        final Shell shell = createShell(display);
    	
        // To use SSL:
        //
        // context.setSecure(true);

        // Optionally send authentication certificates
        //
        // String  cert    = "c:\\myCerts\\cert.der";  //$NON-NLS-1$
        // String  privKey = "c:\\myCerts\\privkey.der";  //$NON-NLS-1$
        // String  cacert  = "c:\\myCerts\\cacert.der";  //$NON-NLS-1$
        // context.setSSLCertificates(cert, privKey, cacert);
	
        // Set username and password for protected services
        String username = null;
        String password = null;
        
        if (username == null || password == null) {
            final LoginDialog loginDialog = new LoginDialog(shell, server);
            int openCode = loginDialog.open();
            if (openCode == Window.CANCEL) {
                display.dispose();
                System.exit(0);
            }
            username = loginDialog.getUserName();
            password = loginDialog.getPassword();
        }
        
        try {
            context.connect(server, username, password);
        } catch (ServiceException e) {
            System.out.println("\n\tCannot connect to server \""+server+"\"");  //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
            System.exit(0);
        }
	
        String svcName = "%value literalIfcName%:%value svcName%";  //$NON-NLS-1$
	
        try
        {
            IData inputDocument = null;
            // Collect inputs (top-level only)
            inputDocument = getInputs(context, shell, svcName);
            if (isCancel) {
                display.dispose();
                System.exit(0);
            }
            
            Service.setContext(context);
            
            IData initialInput = IDataUtil.clone(inputDocument);
            
            // *** Invoke the Service and Disconnect ***
            IData outputDocument = invoke(inputDocument);
            context.disconnect();
            System.out.println("\n********* Successful invoke **********");  //$NON-NLS-1$

            // *** Access the Results ***
            System.out.println("\n************* Inputs *****************");  //$NON-NLS-1$
            boolean hasInputs = false;
            if (initialInput != null && initialInput.getCursor() != null) {
                hasInputs = initialInput.getCursor().hasMoreData();
            }
            if (hasInputs) {
                GenUtil.printRec(initialInput, "Inputs");  //$NON-NLS-1$
            }
            else {
                System.out.println("This service has no inputs.");  //$NON-NLS-1$
            }

            System.out.println("\n************* Outputs *****************");  //$NON-NLS-1$
            boolean hasOutputs = false;
            if (outputDocument != null && outputDocument.getCursor() != null) {
                hasOutputs = outputDocument.getCursor().hasMoreData();
            }
            if (hasOutputs) {
                GenUtil.printRec(outputDocument, "Outputs");  //$NON-NLS-1$
            }
            else {
                System.out.println("This service has no outputs.");  //$NON-NLS-1$
            }
            
            if (hasOutputs) {
                NSRecord nsrecord = (NSRecord) NSRecordUtility.createFromSample(outputDocument);
                if (nsrecord.getFieldCount() > 0) {
                    InputDialogLaunch outputDlg = 
                        new InputDialogLaunch(shell, nsrecord, outputDocument, svcName);
                    outputDlg.setOutputMode();
                    outputDlg.open();
                }
            }
            
        } catch (IOException e) {
            System.err.println(e);
        } catch (ServiceException e) {
            System.err.println(e);
        } catch (com.wm.app.b2b.server.ServiceException e) {
            System.err.println(e);
        }
        display.dispose();
        System.exit(0);
    }
    
    // *** Collect Inputs *** //
    public static IData getInputs(Context context, Shell shell, String svcName)
         throws IOException, ServiceException
    {
        NSName nsName = NSName.create(svcName);
        NSService nsService = (NSService) context.getQuery().getNode(nsName);
    	if (nsService != null) {
            NSSignature sig = nsService.getSignature();
            if (sig != null) {
                NSRecord inputRecord = sig.getInput();
                if (inputRecord != null && inputRecord.getFieldCount() > 0) {
                    IData in = IDataFactory.create();
                    
                    Class currentClass = %value literalIfcName%.%value svcName%_TestHarness.class;
                    InputDialogLaunch inputDlg =
                        new InputDialogLaunch(shell, inputRecord, in, svcName,currentClass);
                    
                    
                    int openCode = inputDlg.open();
                    if (openCode == Window.CANCEL) {
                        isCancel = true;
                        return null;
                    }
                    
                    IData inputData = inputDlg.getInput();
                    return inputData;
                }
            }
        }
        return IDataFactory.create();
    }
    
    public static IData invoke(IData inputDocument)
        throws IOException, ServiceException, com.wm.app.b2b.server.ServiceException, NetException
    {
        %ifvar useNewJavaSignature%IData inDoc = inputDocument;%else%Values inDoc = null;
        
        if (inputDocument != null) {
            inDoc = Values.use(inputDocument);
        }%endif%

        %ifvar useNewJavaSignature%%else%Values out = %endif%%value svcName%_SVC.%value svcName%(inDoc);
        
        %ifvar useNewJavaSignature%return inDoc;%else%if (out != null) {
            return out.getIData();
        }
        else {
            return null;
        }%endif%

    }
    
    /**
     * Creates a Shell used for displaying dialogs
     * @return the Shell
     */
    private static Shell createShell(final Display display) {
        final Shell shell = new Shell(display, SWT.APPLICATION_MODAL | SWT.NO_TRIM | SWT.ON_TOP);
        final FillLayout fillLayout = new FillLayout();
        fillLayout.marginHeight = 1;
        shell.setLayout(fillLayout);
        return shell;
    }
    
    /**
     * This class is used to present a dialog for entering
     * user name and password for IS
     */
    public static class LoginDialog extends Dialog {
    	
        private Text txt_Password;
        private Text txt_Username;
        private String serverLoc;
        private String uid;
        private String pw;

        /**
         * Constructor
         * @param shell the Shell
         * @param serverLoc the server location
         */
        public LoginDialog(Shell shell, String serverLoc) {
                super(shell);
                this.serverLoc = serverLoc;
        }

        /**
         * Create the dialog area
         */
        protected Control createDialogArea(Composite parent) {
            Shell shell = parent.getShell();
            shell.setText("Enter credentials for " + serverLoc);  //$NON-NLS-1$
            Composite composite = (Composite)super.createDialogArea(parent);

            final GridLayout gridLayout = new GridLayout();
            gridLayout.numColumns = 2;
            gridLayout.marginHeight = 4;
            gridLayout.verticalSpacing = 4;
            gridLayout.marginWidth = 4;
            gridLayout.horizontalSpacing = 4;
            composite.setLayout(gridLayout);

            final GridData gridData = new GridData(GridData.FILL, GridData.FILL, false, false);
            gridData.widthHint = 500;

            final CLabel clbl_Username = new CLabel(composite, SWT.NONE);
            clbl_Username.setText("User name");  //$NON-NLS-1$

            txt_Username = new Text(composite, SWT.BORDER);
            GridData gd = new GridData(GridData.FILL_HORIZONTAL);
            gd.widthHint = 200;
            gd.verticalIndent = 5;
            txt_Username.setLayoutData(gd);

            final CLabel clbl_Password = new CLabel(composite, SWT.NONE);
            clbl_Password.setText("Password");  //$NON-NLS-1$

            txt_Password = new Text(composite, SWT.BORDER | SWT.PASSWORD);
            gd = new GridData(GridData.FILL_HORIZONTAL);
            gd.widthHint = 200;
            txt_Password.setLayoutData(gd);

            txt_Username.setFocus();

            return composite;
        }

        /**
         * Notifies that the ok button of this dialog has been pressed.
         */
        protected void okPressed() {
            uid = txt_Username.getText();
            pw = txt_Password.getText();
            super.okPressed();
        }

        /**
         * Return the user name
         * @return the user name
         */
        public String getUserName() {
            return uid;
        }

        /**
         * Returns the password
         * @return the password
         */
        public String getPassword() {
            return pw;
        }
    }
}

