/*
 * This class has been automatically generated by Software AG Designer.
 *
 */

using System;
using webMethods.ClientAPI;
using webMethods.ClientAPI.Data;

public class %value svcName%
{
    public static void Main(String[] args)
    {
        // Connect to server - edit for alternate server
        String  server = "%value serverHostPort%";
        Context context = new Context();

        // Set username and password for protected services
        String username = "";
        String password = "";

        try
        {
            username = args[0];
            password = args[1];
            context.connect(server, username, password);
        } catch (Exception e) {
            Console.WriteLine("\n\tUsername= \"" + username+"\" " + "Password= \"" + password+"\"\n" + 
				              "\tCannot connect to server \""+server+"\"\n\t" + e);
            return;
        }

        try
        {
            %ifvar inputRec%// Collect inputs (top-level only)
            IData inputDocument = getInputs();
            %endif%

            // *** Invoke the Service and Disconnect ***
            %ifvar outputRec%IData outputDocument = invoke(context%ifvar inputRec%, inputDocument%endif%);
            %else%invoke(context%ifvar inputRec%, inputDocument%endif%);
            %endif%context.disconnect();
            Console.WriteLine("\n********* Successful invoke **********");

            // *** Access the Results ***
            Console.WriteLine("\n************* Inputs *****************");
            %ifvar inputRec%printIData(inputDocument, 0, 0);
            %else%Console.WriteLine("This Service has no inputs.");%endif%

            Console.WriteLine("\n************* Outputs *****************");
            %ifvar outputRec%printIData(outputDocument, 0, 0);
            %else%Console.WriteLine("This Service has no outputs.");%endif%

        } catch (Exception e) {
            Console.Error.WriteLine(e);
        }
        return;
    }

%ifvar inputRec%%loop records%
%ifvar name equals('Input')%    
    // *** Collect Inputs *** //
    public static IData getInputs()
    {
         IData outData = IDataFactory.create();
         IDataCursor idc = outData.getCursor();
%loop fields%%switch fieldType%
%case str     %         IDataUtil.put(idc, "%value -u literalName%", getString("%value -u literalName%"));
%case strarray%         IDataUtil.put(idc, "%value -u literalName%", getStringArray("%value -u literalName%"));
%case strtable%         IDataUtil.put(idc, "%value -u literalName%", getStringTable("%value -u literalName%"));
%case rec     %         IDataUtil.put(idc, "%value -u literalName%", %value -u bindToRec%_getInputs());
%case recarray%
         IData[] %value name% = new IData[1];
         %value name%[0] = %value bindToRec%_getInputs();
         idc.insertAfter("%value -u literalName%", %value name%);
%endswitch%%endloop fields%
         idc.destroy();
         return outData;
    }
%endif%
%endloop records%%endif%

    //acquires string input from console
    public static String getString(String name)
    {
         Console.Write(name + " =");
         return Console.ReadLine();
    }

    //acquires string array input from console
    public static String[] getStringArray(String name)
    {
         int size;
         String tmp;
         Console.Write(name + ": how large? ");
         tmp = Console.ReadLine();
         size = int.Parse(tmp);

         String[] strArray = new String[size];

         for(int i = 0; i < size; i++){
             strArray[i] = getString(name +"[" + i + "]");
         }

         return strArray;
    }

    //acquires multidimensional string array input from console
    public static String[ , ] getStringTable(String name)
    {
         int rows = 0, cols = 0;
         String tmp;
         Console.Write(name + ": how many rows? ");
         tmp = Console.ReadLine();
         rows = int.Parse(tmp);

         Console.Write(name + ": how many cols? ");
         tmp = Console.ReadLine();
         cols = int.Parse(tmp);

         String[ , ] strTable = new String[rows,cols];

         for(int i = 0; i < rows; i++){
             for(int j = 0; j < cols; j++){
                  strTable[i,j] = getString(name+"["+i+"]["+j+"]");
             }
         }

         return strTable;
    }

    //invoke the service
    public static %ifvar outputRec%IData%else%void%endif% invoke(
        Context context%ifvar inputRec%, IData inputDocument%endif%)
    {
         IData outData = context.invoke("%value literalIfcName%", "%value svcName%", %ifvar inputRec%inputDocument%else%null%endif%);
         %ifvar outputRec%IData outputDocument = outData;
         return outputDocument;%else%return;%endif%

    }

    //retrieves a corresponding value from IData given a specific key
    public static Object getValue(IData pipeline, String sParamNameKey)
    {
         IDataCursor idc = pipeline.getCursor();
         //IDataUtil has specific accessors for various data types
         //(i.e. IDataUtil.getString(IDataCursor cursor, String key)
         //(i.e. IDataUtil.getInt(IDataCursor cursor, String key , int defaultVal)
         Object o = IDataUtil.get(idc, sParamNameKey);
         idc.destroy();
         return o;
    }
	
    //iterates IData keys, calling a print function for each value retrieved
    private static void printIData(IData i, int pad, int num)
    {
        IDataCursor idc = i.getCursor();
        if(idc.first() == false) return;
        do
        {
            String key = idc.Key;
            printObject(getValue(i, key), key, pad, num);
        }
        while(idc.next());
    }

    //writes IData keys and values to console as formatted output
    private static void printObject(Object o, String key, int pad, int num)
    {
        if (o == null)
        {
            Console.WriteLine(getPadding(pad) +  key+" = null");
        }
        else if (o is String)
        {
            Console.WriteLine(getPadding(pad) + key+(num>0 ? "["+(num-1)+"] " : " ")+"= "+(String)o);
        }
        else if (o is IData)
        {
            Console.WriteLine(getPadding(pad) + key+" ==> DOCUMENT"+(num>0 ? "["+(num-1)+"]" : ""));
            printIData((IData)o, pad+1, 0);
        }
        else if (o is Object[])
        {
            Console.WriteLine(getPadding(pad) + key+" ==> "+(num>0 ? "["+(num-1)+"]" : "")+"[]");
            Object[] oa = (Object[])o;
            int cnt = oa.Length;
            for (int i=0; i<cnt; i++)
                printObject(oa[i], key+(num>0 ? "["+(num-1)+"]" : ""), pad+1, i+1);
        }
    }

    //helper method for formatted output
    private static String getPadding(int depth)
    {
        String s = "";
        for (int i = 0; i < depth; i++)
        {
            s += "\t";
        }
        return s;
    }
}

