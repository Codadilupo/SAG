/*
 * This class has been automatically generated by Software AG Designer.
 *
 */

import java.io.*;
import java.util.Vector;
import com.wm.util.Table;
import com.wm.data.*;
import com.wm.util.coder.IDataCodable;
import com.wm.app.b2b.util.GenUtil;
import com.wm.app.b2b.client.Context;
import com.wm.app.b2b.client.ServiceException;

public class %value svcName%
{
    public static void main(String[] args)
    {
        // Connect to server - edit for alternate server
        String  server = "%value serverHostPort%";
        Context context = new Context();

        // To use SSL:
        //
        // context.setSecure(true);

        // Optionally send authentication certificates
        //
        // String  cert    = "c:\\myCerts\\cert.der";
        // String  privKey = "c:\\myCerts\\privkey.der";
        // String  cacert  = "c:\\myCerts\\cacert.der";
        // context.setSSLCertificates(cert, privKey, cacert);

        // Set username and password for protected services
        String username = null;
        String password = null;

        try {
            context.connect(server, username, password);
        } catch (ServiceException e) {
            System.out.println("\n\tCannot connect to server \""+server+"\"");
            System.exit(0);
        }

        try
        {
        %ifvar inputRec%// Collect inputs (top-level only)
	    IData inputDocument = getInputs();
        %endif%

            // *** Invoke the Service and Disconnect ***
            %ifvar outputRec%IData outputDocument = invoke(context%ifvar inputRec%, inputDocument%endif%);
            %else%invoke(context%ifvar inputRec%, inputDocument%endif%);
            %endif%context.disconnect();
            System.out.println("\n********* Successful invoke **********");

            // *** Access the Results ***
            System.out.println("\n************* Inputs *****************");
            %ifvar inputRec%GenUtil.printRec(inputDocument, "%value inputRecName%");
            %else%System.out.println("This Service has no inputs.");%endif%

            System.out.println("\n************* Outputs *****************");
            %ifvar outputRec%GenUtil.printRec(outputDocument, "%value outputRecName%");
            %else%System.out.println("This Service has no outputs.");%endif%

        } catch (IOException e) {
            System.err.println(e);
        } catch (ServiceException e) {
            System.err.println(e);
        }
        System.exit(0);
    }

    %ifvar inputRec%
    // *** Collect Inputs *** //
    public static IData getInputs()
         throws IOException, ServiceException
    {
       return %value inputRecName%_getInputs();
    }

%loop records%
    public static IData %value name%_getInputs()
         throws IOException, ServiceException
    {
         IData out = IDataFactory.create();
         IDataCursor idc = out.getCursor();
%loop fields%%switch fieldType%
%case str     %         idc.insertAfter("%value -u literalName%", getString("%value -u literalName%"));
%case strarray%         idc.insertAfter("%value -u literalName%", getStringArray("%value -u literalName%"));
%case strtable%         idc.insertAfter("%value -u literalName%", getStringTable("%value -u literalName%"));
%case rec     %         idc.insertAfter("%value -u literalName%", %value -u bindToRec%_getInputs());
%case recarray%
         IData[] %value name% = new IData[1];
         %value name%[0] = %value bindToRec%_getInputs();
         idc.insertAfter("%value -u literalName%", %value name%);
%endswitch%%endloop fields%
         idc.destroy();
         return out;
    }
%endloop records%%endif%

    public static String getString(String name)
         throws IOException, ServiceException
    {
         System.out.print(name + " =");
         return (new BufferedReader(new InputStreamReader(System.in))).readLine();
    }

    public static String[] getStringArray(String name)
         throws IOException, ServiceException
    {
         int size;
         String tmp;
         System.out.print(name + ": how large? ");
         tmp = (new BufferedReader(new InputStreamReader(System.in))).readLine();
         size = Integer.parseInt(tmp);

         String[] strArray = new String[size];

         for(int i = 0; i < size; i++){
	     strArray[i] = getString(name +"[" + i + "]");
         }

         return strArray;
    }

    public static String[][] getStringTable(String name)
         throws IOException, ServiceException
    {
         int rows = 0, cols = 0;
         String tmp;
         System.out.print(name + ": how many rows? ");
         tmp = (new BufferedReader(new InputStreamReader(System.in))).readLine();
         rows = Integer.parseInt(tmp);

         System.out.print(name + ": how many cols? ");
         tmp = (new BufferedReader(new InputStreamReader(System.in))).readLine();
         cols = Integer.parseInt(tmp);

         String[][] strTable = new String[rows][cols];

         for(int i = 0; i < rows; i++){
             for(int j = 0; j < cols; j++){
                  strTable[i][j] = getString(name+"["+i+"]["+j+"]");
             }
         }

         return strTable;
    }

    public static %ifvar outputRec%IData%else%void%endif% invoke(
        Context context%ifvar inputRec%, IData inputDocument%endif%)
        throws IOException, ServiceException
    {
         IData out = context.invoke("%value literalIfcName%", "%value svcName%", %ifvar inputRec%inputDocument%else%null%endif%);
         %ifvar outputRec%IData outputDocument = out;
         return outputDocument;%else%return;%endif%

    }
}

