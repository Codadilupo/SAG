function FileData_Pairs(x)
{
x.t("example","package");
x.t("library","user\u2019s");
x.t("parameter","omitted");
x.t("managing","services");
x.t("publishes","metadata");
x.t("integration","server");
x.t("instructions","webmethods");
x.t("current","thread");
x.t("current","server");
x.t("ns.package","changed");
x.t("ns.package","deleted");
x.t("until","publish");
x.t("line","asset.");
x.t("line","contain");
x.t("line","contains");
x.t("exit","service");
x.t("packages","string");
x.t("packages","trading");
x.t("packages","whose");
x.t("completed.","setting");
x.t("browser","unavailable");
x.t("networks","assets");
x.t("networks","assets.");
x.t("invoking","service");
x.t("want","publish");
x.t("want","publish.");
x.t("asset.","line");
x.t("publish","operation");
x.t("publish","metadata");
x.t("publish","process");
x.t("default.","output");
x.t("list","list");
x.t("list","strings");
x.t("list","optional.");
x.t("complete","service");
x.t("guide","input");
x.t("assets","false");
x.t("assets","metadata");
x.t("assets","sync");
x.t("library.","instructions");
x.t("library.","array");
x.t("library.","service");
x.t("false","publish");
x.t("false","launch");
x.t("specified","integration");
x.t("true","publish");
x.t("true","launch");
x.t("directly","developer");
x.t("test","function");
x.t("tnassets","string");
x.t("operation","completed.");
x.t("operation","complete");
x.t("operation","executes.");
x.t("name","metadata");
x.t("changed","string");
x.t("changed","metadata");
x.t("parameters","packages");
x.t("parameters","added");
x.t("publish.","parameter");
x.t("to...","true");
x.t("to...","to...");
x.t("pub.asset:publish","pub.asset:publish");
x.t("pub.asset:publish","wmassetpublisher.");
x.t("strings","string");
x.t("string","list");
x.t("string","assets");
x.t("string","optional.");
x.t("string","contains");
x.t("array","contains");
x.t("input","parameters");
x.t("thread","exit");
x.t("thread","(asynchronously)");
x.t("thread","(synchronously)");
x.t("contain","listeners");
x.t("metadata","library");
x.t("metadata","want");
x.t("metadata","library.");
x.t("metadata","specified");
x.t("metadata","changed");
x.t("metadata","type.");
x.t("metadata","trading");
x.t("metadata","added");
x.t("metadata","published.");
x.t("metadata","deleted");
x.t("(asynchronously)","to...");
x.t("next","step.");
x.t("type.","example");
x.t("trading","networks");
x.t("sync","string");
x.t("step.","false");
x.t("function","managing");
x.t("specifies","whether");
x.t("whether","publish");
x.t("whether","launch");
x.t("launch","publish");
x.t("listeners","ns.package");
x.t("listeners","line");
x.t("omitted","metadata");
x.t("added","string");
x.t("added","metadata");
x.t("optional.","list");
x.t("optional.","specifies");
x.t("webmethods","metadata");
x.t("whose","metadata");
x.t("assets.","to...");
x.t("named","listeners");
x.t("developer","test");
x.t("process","current");
x.t("process","separate");
x.t("services","screen");
x.t("screen","integration");
x.t("asset\u2019s","name");
x.t("separate","thread");
x.t("separate","thread.");
x.t("output","parameters");
x.t("configure","integration");
x.t("published.","tnassets");
x.t("unavailable","publish");
x.t("(synchronously)","separate");
x.t("proceeds","next");
x.t("prevents","browser");
x.t("wmassetpublisher.","publishes");
x.t("package","named");
x.t("service","until");
x.t("service","want");
x.t("service","directly");
x.t("service","configure");
x.t("service","proceeds");
x.t("service","service");
x.t("connect","metadata");
x.t("setting","invoking");
x.t("setting","prevents");
x.t("thread.","setting");
x.t("administrator.","setting");
x.t("deleted","string");
x.t("deleted","metadata");
x.t("names","packages");
x.t("executes.","default.");
x.t("server","packages");
x.t("server","thread");
x.t("server","connect");
x.t("server","administrator.");
x.t("user\u2019s","guide");
x.t("contains","line");
x.t("contains","asset\u2019s");
x.t("contains","names");
}
